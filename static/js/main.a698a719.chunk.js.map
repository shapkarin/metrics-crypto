{"version":3,"sources":["components/Item.js","components/assets.js","components/metrics.js","stores/filters.js","pages/main.js","router.js","models/asset.js","models/metric.js","stores/assets.js","stores/metrics.js","stores/index.js","App.js","serviceWorker.js","index.js"],"names":["Item","_ref","index","style","data","filter","getItemById","selected","item","React","createElement","onClick","className","concat","name","full_name","Assets","inject","observer","assetsStore","filtersStore","Fragment","reset","metrics","selectedAsset","filtered","length","type","value","assets","query","onChange","_ref2","target","setQuery","data-test","List","marginTop","height","itemCount","itemSize","width","itemData","filterMetrics","id","Metrics","metricsStore","selectedMetric","filterAssets","propTypes","PropTypes","func","defaults","ids","_class","constructor","_initializerDefineProperty","_descriptor","_descriptor2","asset","_metrics$map","this","map","metric","hasOwnProperty","Error","_applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","Object","getOwnPropertyDescriptor","Main","MyRouter","Router","history","createBrowserHistory","Switch","Route","path","component","Asset","Metric","_dec","ref","fetchData","result","list","find","queryLowerCased","toLocaleLowerCase","filteredByMetric","_ref3","_ref4","startsWith","self","indexOf","filteredByQuery","fetch","json","reduce","accumulator","_item$metrics","setList","computed","_descriptor3","_descriptor4","includes","a","App","Provider","stores","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a698a719.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Item = ({ index, style, data: { filter, getItemById, selected } }) => {\n  const item = getItemById(index);\n\n  return (\n    <div\n      style={style}\n      onClick={() => filter(item)}\n      className={`item ${item.name === selected ? 'active' : ''}`}\n    >\n      {item.full_name} â€“ {item.name}\n    </div>\n  );\n};\n\nItem.propTypes = {\n  index: PropTypes.number.isRequired,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  data: PropTypes.shape({\n    filter: PropTypes.func.isRequired,\n    getItemById: PropTypes.func.isRequired,\n    selected: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { observer, inject } from 'mobx-react';\nimport { FixedSizeList as List } from 'react-window';\n\nimport Item from './Item';\n\nconst Assets = inject(\n  'assetsStore',\n  'filtersStore',\n)(\n  observer(({ assetsStore, filtersStore }) => {\n    // not sure that it's a good feature\n    // const listRef = useRef();\n    // reaction(() => filtersStore.assets.metric, () => {\n    //   listRef.current.scrollToItem(0, 'start');\n    // });\n\n    return (\n      <>\n        <button onClick={() => filtersStore.reset('assets')}>\n          Reset List Filters\n        </button>{' '}\n        <br />\n        <div>current asset: {filtersStore.metrics.selectedAsset}</div>\n        Filtered Len: {assetsStore.filtered.length}\n        <br />\n        <hr />\n        <input\n          type=\"text\"\n          value={filtersStore.assets.query}\n          // todo: update react and use onKeyUp\n          onChange={({ target: { value } }) =>\n            filtersStore.setQuery('assets', value)\n          }\n          data-test=\"assets-input\"\n        />\n        <List\n          className=\"list assets\"\n          style={{ marginTop: '23px' }}\n          height={500}\n          itemCount={assetsStore.filtered.length}\n          itemSize={35}\n          width={500}\n          itemData={{\n            filter: (item) => filtersStore.filterMetrics(item),\n            getItemById: (id) => assetsStore.filtered[id],\n            selected: filtersStore.metrics.selectedAsset,\n          }}\n          // ref={listRef}\n        >\n          {Item}\n        </List>\n      </>\n    );\n  }),\n);\n\nAssets.propTypes = {\n  assetsStore: PropTypes.func,\n  filtersStore: PropTypes.func,\n};\n\nexport default Assets;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { observer, inject } from 'mobx-react';\nimport { FixedSizeList as List } from 'react-window';\n\nimport Item from './Item';\n\nconst Metrics = inject(\n  'metricsStore',\n  'filtersStore',\n)(\n  observer(({ metricsStore, filtersStore }) => (\n    <>\n      <button onClick={() => filtersStore.reset('metrics')}>\n        Reset List Filters\n      </button>{' '}\n      <br />\n      <div>current asset: {filtersStore.assets.selectedMetric}</div>\n      Filtered Len: {metricsStore.filtered.length}\n      <br />\n      <hr />\n      <input\n        type=\"text\"\n        value={filtersStore.metrics.query}\n        onChange={({ target: { value } }) =>\n          filtersStore.setQuery('metrics', value)\n        }\n      />\n      <List\n        className=\"list\"\n        style={{ marginTop: '23px' }}\n        height={500}\n        itemCount={metricsStore.filtered.length}\n        itemSize={42}\n        width={600}\n        itemData={{\n          filter: (item) => filtersStore.filterAssets(item),\n          getItemById: (id) => metricsStore.filtered[id],\n          selected: filtersStore.assets.selectedMetric,\n        }}\n      >\n        {Item}\n      </List>\n    </>\n  ))\n);\n\nMetrics.propTypes = {\n  metricsStore: PropTypes.func,\n  filtersStore: PropTypes.func,\n};\n\nexport default Metrics;\n","import { observable, action } from 'mobx';\n\nconst defaults = {\n  assets: {\n    selectedMetric: '',\n    query: '',\n  },\n  metrics: {\n    selectedAsset: '',\n    query: '',\n    ids: [],\n  },\n};\n\nclass FiltersStore {\n  @observable\n  assets = defaults.assets;\n\n  @observable\n  metrics = defaults.metrics;\n\n  @action\n  filterMetrics(asset) {\n    const { metrics, name: selected } = asset;\n\n    this.metrics.selectedAsset = selected;\n    this.metrics.ids = metrics.map(({ metric }) => metric) ?? [];\n  }\n\n  @action\n  filterAssets(metric) {\n    this.assets.selectedMetric = metric.name;\n    this.assets.metric = metric.name;\n  }\n\n  @action\n  setQuery(type, query) {\n    if (!this.hasOwnProperty(type)) {\n      throw new Error(`FiltersStore does not has \"${type}\" property`);\n    }\n    this[type].query = query;\n  }\n\n  @action\n  reset(type) {\n    if (!this.hasOwnProperty(type)) {\n      throw new Error(`FiltersStore does not has \"${type}\" property`);\n    }\n    this[type] = defaults[type];\n  }\n}\n\nexport default new FiltersStore();\n","import React from 'react';\n\nimport { Assets, Metrics } from '../components';\nimport filtersStore from '../stores/filters';\n\n// not sure that I need to use inject\n// const Main = inject('filtersStore')(({ filtersStore }) => (\nconst Main = () => (\n  <>\n    <button\n      onClick={() => {\n        filtersStore.reset('assets');\n        filtersStore.reset('metrics');\n      }}\n    >\n      reset all filters\n    </button>{' '}\n    <br />\n    <br />\n    <div className=\"main\">\n      <div className=\"col\">\n        <div className=\"title\">Assets</div>\n        <Assets />\n      </div>\n      <div className=\"col\">\n        <div className=\"title\">Metrics</div>\n        <Metrics />\n      </div>\n    </div>\n  </>\n);\n\nexport default Main;\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport Main from './pages/main';\nimport { createBrowserHistory } from 'history';\n\nconst MyRouter = () => (\n  <Router history={createBrowserHistory()}>\n    <Switch>\n      <Route path=\"/\" component={Main} />\n    </Switch>\n  </Router>\n);\n\nexport default MyRouter;\n","export default class Asset {\n  constructor({ asset, full_name, metrics }) {\n    this.name = asset;\n    this.full_name = full_name;\n    this.metrics = metrics;\n  }\n}\n","export default class Metric {\n  constructor({ metric, full_name }) {\n    this.name = metric;\n    this.full_name = full_name;\n  }\n}\n","import { observable, computed, action } from 'mobx';\nimport { Asset } from '../models';\nimport filtersStore from './filters';\n\nclass AssetsStore {\n  constructor() {\n    this.fetchData();\n  }\n\n  @observable.ref\n  list = [];\n\n  @computed\n  get filteredByMetric() {\n    const result = this.list.filter(({ metrics }) =>\n      metrics?.find(\n        ({ metric }) => metric === filtersStore.assets.selectedMetric\n      )\n    );\n    return result.length ? result : this.list;\n  }\n\n  @computed\n  get filteredByQuery() {\n    const queryLowerCased = filtersStore.assets.query.toLocaleLowerCase();\n    const byIDs = this.filteredByMetric.filter(\n      ({ name }) => name.toLocaleLowerCase() === queryLowerCased\n    );\n    const byFullName = this.filteredByMetric.filter(({ full_name }) =>\n      full_name.toLocaleLowerCase().startsWith(queryLowerCased)\n    );\n    const result = [...byIDs, ...byFullName].filter(\n      (value, index, self) => self.indexOf(value) === index\n    );\n\n    return result;\n  }\n\n  @computed\n  get filtered() {\n    return this.filteredByQuery;\n  }\n\n  async fetchData() {\n    const { data } = await (\n      await fetch('https://community-api.coinmetrics.io/v4/catalog/assets')\n    ).json();\n    const filtered = data.reduce(\n      (accumulator, item) =>\n        item.metrics?.length ? [...accumulator, new Asset(item)] : accumulator,\n      []\n    );\n    this.setList(filtered);\n  }\n\n  @action\n  setList(list) {\n    this.list = list;\n  }\n}\n\nexport default new AssetsStore();\n","import { observable, computed, action } from 'mobx';\nimport { Metric } from '../models';\nimport filtersStore from './filters';\n\nclass MetricsStore {\n  constructor() {\n    this.fetchData();\n  }\n\n  @observable.ref\n  list = [];\n\n  @observable\n  related = [];\n\n  @observable\n  query = '';\n\n  @observable\n  selected = '';\n\n  @computed\n  get filteredByMetric() {\n    const result = this.list.filter(({ name }) =>\n      filtersStore.metrics.ids.includes(name)\n    );\n    return result.length ? result : this.list;\n  }\n\n  @computed\n  get filteredByQuery() {\n    const queryLowerCased = filtersStore.metrics.query.toLocaleLowerCase();\n    const byIDs = this.filteredByMetric.filter(\n      ({ name }) => name.toLocaleLowerCase() === queryLowerCased\n    );\n    const byFullName = this.filteredByMetric.filter(({ full_name }) =>\n      full_name.toLocaleLowerCase().startsWith(queryLowerCased)\n    );\n    const result = [...byIDs, ...byFullName].filter(\n      (value, index, self) => self.indexOf(value) === index\n    );\n\n    return result;\n  }\n\n  @computed\n  get filtered() {\n    return this.filteredByQuery;\n  }\n\n  async fetchData() {\n    const { data } = await (\n      await fetch('https://community-api.coinmetrics.io/v4/catalog/metrics')\n    ).json();\n    this.setList(data.map((a) => new Metric(a)));\n  }\n\n  @action\n  setList(list) {\n    this.list = list;\n  }\n}\n\nexport default new MetricsStore();\n","import assetsStore from './assets';\nimport metricsStore from './metrics';\nimport filtersStore from './filters';\n\nexport default { assetsStore, metricsStore, filtersStore };\n","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport Router from './router';\nimport stores from './stores';\n\nconst App = () => (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  <Provider {...stores}>\n    <Router />\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<App />, root);\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default;\n    ReactDOM.render(<NextApp />, root);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}